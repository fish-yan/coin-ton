/// <reference types="node" />
import { Address } from "../address/Address";
import { ExternalAddress } from "../address/ExternalAddress";
import { BitString } from "./BitString";
export declare class BitReader {
    private _bits;
    private _offset;
    private _checkpoints;
    constructor(bits: BitString, offset?: number);
    get offset(): number;
    get remaining(): number;
    skip(bits: number): void;
    reset(): void;
    save(): void;
    loadBit(): boolean;
    preloadBit(): boolean;
    loadBits(bits: number): BitString;
    preloadBits(bits: number): BitString;
    loadBuffer(bytes: number): Buffer;
    preloadBuffer(bytes: number): Buffer;
    loadUint(bits: number): number;
    loadUintBig(bits: number): bigint;
    preloadUint(bits: number): number;
    preloadUintBig(bits: number): bigint;
    loadInt(bits: number): number;
    loadIntBig(bits: number): bigint;
    preloadInt(bits: number): number;
    preloadIntBig(bits: number): bigint;
    loadVarUint(bits: number): number;
    loadVarUintBig(bits: number): bigint;
    preloadVarUint(bits: number): number;
    preloadVarUintBig(bits: number): bigint;
    loadVarInt(bits: number): number;
    loadVarIntBig(bits: number): bigint;
    preloadVarInt(bits: number): number;
    preloadVarIntBig(bits: number): bigint;
    loadCoins(): bigint;
    preloadCoins(): bigint;
    loadAddress(): Address;
    loadMaybeAddress(): Address | null;
    loadExternalAddress(): ExternalAddress;
    loadMaybeExternalAddress(): ExternalAddress | null;
    loadAddressAny(): Address | ExternalAddress | null;
    loadPaddedBits(bits: number): BitString;
    clone(): BitReader;
    private _preloadInt;
    private _preloadUint;
    private _preloadBuffer;
    private _loadInternalAddress;
    private _loadExternalAddress;
}
