/// <reference types="node" />
import inspectSymbol from 'symbol.inspect';
import { Dictionary, DictionaryKey, DictionaryKeyTypes, DictionaryValue } from '../dict/Dictionary';
import { BitReader } from "./BitReader";
import { Cell } from "./Cell";
export declare class Slice {
    private _reader;
    private _refs;
    private _refsOffset;
    constructor(reader: BitReader, refs: Cell[]);
    get remainingBits(): number;
    get offsetBits(): number;
    get remainingRefs(): number;
    get offsetRefs(): number;
    skip(bits: number): this;
    loadBit(): boolean;
    preloadBit(): boolean;
    loadBoolean(): boolean;
    loadMaybeBoolean(): boolean | null;
    loadBits(bits: number): import("./BitString").BitString;
    preloadBits(bits: number): import("./BitString").BitString;
    loadUint(bits: number): number;
    loadUintBig(bits: number): bigint;
    preloadUint(bits: number): number;
    preloadUintBig(bits: number): bigint;
    loadMaybeUint(bits: number): number | null;
    loadMaybeUintBig(bits: number): bigint | null;
    loadInt(bits: number): number;
    loadIntBig(bits: number): bigint;
    preloadInt(bits: number): number;
    preloadIntBig(bits: number): bigint;
    loadMaybeInt(bits: number): number | null;
    loadMaybeIntBig(bits: number): bigint | null;
    loadVarUint(bits: number): number;
    loadVarUintBig(bits: number): bigint;
    preloadVarUint(bits: number): number;
    preloadVarUintBig(bits: number): bigint;
    loadVarInt(bits: number): number;
    loadVarIntBig(bits: number): bigint;
    preloadVarInt(bits: number): number;
    preloadVarIntBig(bits: number): bigint;
    loadCoins(): bigint;
    preloadCoins(): bigint;
    loadMaybeCoins(): bigint | null;
    loadAddress(): import("..").Address;
    loadMaybeAddress(): import("..").Address | null;
    loadExternalAddress(): import("..").ExternalAddress;
    loadMaybeExternalAddress(): import("..").ExternalAddress | null;
    loadAddressAny(): import("..").Address | import("..").ExternalAddress | null;
    loadRef(): Cell;
    preloadRef(): Cell;
    loadMaybeRef(): Cell | null;
    preloadMaybeRef(): Cell | null;
    loadBuffer(bytes: number): Buffer;
    preloadBuffer(bytes: number): Buffer;
    loadStringTail(): string;
    loadMaybeStringTail(): string | null;
    loadStringRefTail(): string;
    loadMaybeStringRefTail(): string | null;
    loadDict<K extends DictionaryKeyTypes, V>(key: DictionaryKey<K>, value: DictionaryValue<V>): Dictionary<K, V>;
    loadDictDirect<K extends DictionaryKeyTypes, V>(key: DictionaryKey<K>, value: DictionaryValue<V>): Dictionary<K, V>;
    endParse(): void;
    asCell(): Cell;
    asBuilder(): import("./Builder").Builder;
    clone(fromStart?: boolean): Slice;
    toString(): string;
    [inspectSymbol]: () => string;
}
